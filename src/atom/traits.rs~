use atom::numbers::number::Numeric;
use atom::symbols::symbol::Symbol;
use atom::strings::string::SString;

use atom::atom::SimplexAtom;

use parsing::utilities::numerics::representable_numeric;
use parsing::utilities::string::representable_string;
use parsing::utilities::symbols::representable_symbol;

// Could this be refactored to use simple trait bounds?
// Maybe create a simpler api on the lower level number API.

impl From<i32> for SimplexAtom {
    fn from(num: i32) -> SimplexAtom {
        SimplexAtom::SimplexNumeric(Numeric::LittleInteger(num as i64))
    }
}

impl From<u32> for SimplexAtom {
    fn from(num: u32) -> SimplexAtom {
        SimplexAtom::SimplexNumeric(Numeric::LittleInteger(num as i64))
    }
}

impl From<i64> for SimplexAtom {
    fn from(num: i64) -> SimplexAtom {
        SimplexAtom::SimplexNumeric(Numeric::LittleInteger(num))
    }
}

impl From<f32> for SimplexAtom {
    fn from(num: f32) -> SimplexAtom {
        SimplexAtom::SimplexNumeric(Numeric::from_str(num.to_string().as_str()).unwrap())
    }
}

impl From<f64> for SimplexAtom {
    fn from(num: f64) -> SimplexAtom {
        SimplexAtom::SimplexNumeric(Numeric::from_str(num.to_string().as_str()).unwrap())
    }
}

impl <'a> From<&'a str> for SimplexAtom {
    fn from(s: &str) -> SimplexAtom {
        match (representable_numeric(s), representable_string(s), representable_symbol(s)) {
            (true, _, _) => {
                match Numeric::from_str(s) {
                    Some(num) => {
                        SimplexAtom::SimplexNumeric(num)
                    }

                    None => {
                        panic!(r#"An internal error in the SimplexCore library occured: representable_numeric(s) 
                        in the parsing library returned true, ensuring that our numeric is parseable, however 
                        Numeric::from_str(s) returned None."#);
                    }
                }
            }

            (_, true, _) =>  {
                match SString::from_str(s) {
                    Some(s) => {
                        SimplexAtom::SimplexString(s)
                    }

                    None => {
                        panic!(r#"An internal error in the SimplexCore library occured: representable_string(s) 
                        in the parsing library returned true, ensuring that our numeric is parseable, however 
                        SString::from_str(s) returned None."#);
                    }
                }
            }

            (_, _, true) => {
                match Symbol::from_str(s) {
                    Some(s) => {
                        SimplexAtom::SimplexSymbol(s)
                    }

                    None => {
                        panic!(r#"An internal error in the SimplexCore library occured: representable_symbol(s) 
                        in the parsing library returned true, ensuring that our numeric is parseable, however 
                        Symbol::from_str(s) returned None."#);
                    }
                }
            }

            _ => SimplexAtom::SimplexSymbol(Symbol::from_str("Simplex`UnknownParse").unwrap())
        }
    }
}
